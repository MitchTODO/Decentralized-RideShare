/*
var RideTokenContract = artifacts.require('RideToken')

contract('RideToken', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var ownerID = accounts[0]
    const userID = accounts[1]
    const driverID = accounts[2]
    const ridePrice = web3.utils.toWei('5', "ether")




    console.log("<----------------ACCOUNTS----------------> ")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("User: accounts[1] ", accounts[1])
    console.log("Driver: accounts[2] ", accounts[2])
    console.log("<-------TESTING CONTRACT FUNCTIONS------->")
    // 1st Test
    it("Testing transfer of ", async() => {
        const token = await RideTokenContract.deployed();

        token.transfer(userID,ridePrice,{from:driverID})

        //await token.totalSupply({from:userID});
        //await token.addDriver(driverID);

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        //var balance = web3.utils.toWei('1', "ether");
        // Mark an item as Harvested by calling function harvestItem()


        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        // check for last past emitted events
        await token.getPastEvents('Transfer', {
            fromBlock: 0,
            toBlock: 'latest'
        }, (error, events) => { console.log(events,error); })
        .then((events) => {
            rideID = events[0].returnValues.rideID;
            console.log(events)
            eventEmitted = true;
            assert.equal(eventEmitted, true, 'Error: Invalid item SKU');
        });

        //const resultBufferOne = await supplyChain.fetchItemBufferOne(rideID);
        //console.log(resultBufferOne)
    })

});
*/
